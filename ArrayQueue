//package edu.wit.cs.comp2000;

/**
 * A class that implements the ADT queue by using an expandable circular array
 * 
 * @author Frank M. Carrano
 * @author Timothy M. Henry
 * @version 4.0
 */
public final class ArrayQueue<T> implements QueueInterface<T>
{

	private T[] queue;		// Circular array of queue entries and one unused location
	private int frontIndex;
	private int backIndex;
	private boolean initialized = false;
	private int countOfEntries = 0;
	private static final int DEFAULT_CAPACITY = 50;
	private static final int MAX_CAPACITY = 10000;


	public ArrayQueue()
	{
		this(DEFAULT_CAPACITY);
	} // end default constructor


	public ArrayQueue(int initialCapacity)
	{
		checkCapacity(initialCapacity);

		// The cast is safe because the new array contains null entries
		@SuppressWarnings("unchecked")
		T[] tempQueue = ( T[] ) new Object[initialCapacity];
		queue = tempQueue;
		frontIndex = 0;
		backIndex = initialCapacity;
		initialized = true;
	} // end constructor


	private void checkInitialization()
	{ //error- check if exists
		if(initialized == false || queue.length == 0)
			throw new EmptyQueueException();
		
	}	// end checkInitialization()


	private void checkCapacity(int initialCapacity)
	{
		if(initialCapacity > MAX_CAPACITY )
			throw new IllegalStateException("Full");
		
	}	// end checkCapacity()


	// Doubles the size of the array queue if it is full
	// Precondition: checkInitialization has been called.
	// Modified 
	private void ensureCapacity()
	{
		if (countOfEntries == queue.length) // if array is full,
		{                                   // double size of array
			T[] oldQueue = queue;
			int oldSize = oldQueue.length;
			int newSize = 2 * oldSize;
			checkCapacity(newSize);

			// The cast is safe because the new array contains null entries
			@SuppressWarnings("unchecked")
			T[] tempQueue = (T[]) new Object[2 * oldSize];
			queue = tempQueue;
			for (int index = 0; index < oldSize; index++)
			{
				queue[index] = oldQueue[frontIndex];
				frontIndex = (frontIndex + 1) % oldSize;
			} // end for
	      
			frontIndex = 0;
			backIndex = oldSize - 1;
		} // end if
	}	// end ensureCapacity()


	@Override
	public void enqueue(T newEntry)
	{
		checkInitialization();
		ensureCapacity();
		backIndex = (backIndex + 1) % queue.length;
		queue[backIndex] = newEntry;
		countOfEntries++;
	}	// end enqueue()


	@Override
	public T dequeue()
	{
		checkInitialization();
		if (isEmpty())
			throw new EmptyQueueException();
		else
		{
            T front = queue[frontIndex];
            queue[frontIndex] = null;
            frontIndex = (frontIndex + 1) % queue.length;
            countOfEntries--;
            return front;
		} // end if
		   
	}	// end dequeue()


	@Override
	public T getFront()
	{
		checkInitialization();
		if(isEmpty())
			throw new EmptyQueueException();
		else
			return queue[frontIndex+1];
	}	// end getFront()


	@Override
	public boolean isEmpty()
	{
		//change for length not there would be an error
		return (countOfEntries == 0);
		
	}	// end isEmpty()


	@Override
	public void clear()
	{
		countOfEntries = 0;
	}	// end clear()

} // end class ArrayQueue
